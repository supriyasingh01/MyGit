Rule

--
Sid
17541

--
Summary:
This event is generated when an attempt is made to exploit a known vulnerability in avast antivirus.

--
Impact:
Denial of Service. Information disclosure. Loss of integrity. 

--
Detailed Information:
Heap-based buffer overflow in alwil avast! Anti-virus Engine before 4.7.869 allows remote attackers to execute arbitrary code via a crafted LHA file that contains extended headers with file and directory names whose concatenation triggers the overflow.

--
Affected Systems:
alwil avast antivirus 4.0.168
alwil avast antivirus 4.0.172
alwil avast antivirus 4.0.183
alwil avast antivirus 4.0.202
alwil avast antivirus 4.0.211
alwil avast antivirus 4.0.229
alwil avast antivirus 4.0.235
alwil avast antivirus 4.1.260
alwil avast antivirus 4.1.268
alwil avast antivirus 4.1.278
alwil avast antivirus 4.1.287
alwil avast antivirus 4.1.289
alwil avast antivirus 4.1.304
alwil avast antivirus 4.1.319
alwil avast antivirus 4.1.335
alwil avast antivirus 4.1.342
alwil avast antivirus 4.1.357
alwil avast antivirus 4.1.389
alwil avast antivirus 4.1.396
alwil avast antivirus 4.1.412
alwil avast antivirus 4.1.418
alwil avast antivirus 4.1.501
alwil avast antivirus 4.5.518
alwil avast antivirus 4.5.549
alwil avast antivirus 4.5.561
alwil avast antivirus 4.6.460
alwil avast antivirus 4.6.460
alwil avast antivirus 4.6.603
alwil avast antivirus 4.6.623
alwil avast antivirus 4.6.763

--
Attack Scenarios:
Many types of buffer overflow exist, this is a generic term that may apply to many circumstances that result in an overflow of some kind. A parameter overflow for example, means that the attacker is able to supply data as a parameter to the execution of a program. When the program expands the supplied data, if the size of the parameter is not correctly checked, it may exceed a set limit allowing the attacker to overflow the buffer and write data into memory.
In a stack overflow, the attacker has the opportunity to overwrite a return memory address which allows them to point the return address to a memory location containing code they wish to execute. This allows the attacker to run code with the full privileges of the program in use. The attacker may also supply the address for a known important call, for example the system() call, with the arguments to the call on the stack. The stack also contains the stack pointer and the frame pointer, overwriting these values may lead to a write-what-where condition.
In a heap overflow, it is possible to overwrite function pointers that may be in memory. This may allow the attacker to execute code in memory by changing the function pointer to move to code of their choosing. This can occur even in programs that do not necessarily use function pointers since they may be left in memory at run time. The heap also contains user data which also becomes visible to the attacker.

--
Ease of Attack:
Medium.

--
False Positives:
None known.

--
False Negatives:
None known.

--
Corrective Action:
Upgrade to the latest non-affected version of the software.

Apply the appropriate vendor supplied patches.

--
Contributors:
Sourcefire Vulnerability Research Team
This document was generated from data supplied by the National Vulnerability Database. A product of the National Institute of Standards and Technology.
For more information see http://nvd.nist.gov/

--
Additional References:

NIST CVE-2006-4626:
http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2006-4626
 
Common Weakness Enumeration:
http://cwe.mitre.org/data/definitions/120.html
 
Common Attack Pattern Enumeration and Classification:
http://capec.mitre.org/data/definitions/100.html

--
