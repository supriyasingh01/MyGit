{\rtf1\ansi\ansicpg1252\cocoartf1187
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 /* A simple server in the internet domain using TCP\
   The port number is passed as an argument */\
#include <stdio.h>\
#include <stdlib.h>\
#include <string.h>\
#include <unistd.h>\
#include <sys/types.h> \
#include <sys/socket.h>\
#include <netinet/in.h>\
#include <sys/wait.h>\
\
void error(const char *msg) /* This function is called when a system call fails. */\
							/*It displays a message about the error on stderr and then aborts the program.*/\
\{\
    perror(msg);\
    exit(1);\
\}\
\
int main(int argc, char *argv[])\
\{\
     int sockfd, newsockfd, portno;/* portno-- stores the port number on which the server accepts connections */\
     socklen_t clilen;/*clilen stores the size of the address of the client*/\
    \
     int fromlen = sizeof(struct sockaddr_in);\
     char buffer[256];\
	struct sockaddr_in cli;\
	\
     \
     struct sockaddr_in serv_addr, cli_addr;/*containing an internet address. */\
     \
     int n;/*it contains the number of characters read or written*/\
     \
     if (argc < 2) \
     \{\
         fprintf(stderr,"ERROR, no port provided\\n");\
         exit(1);\
     \}\
     \
     sockfd = socket(AF_INET, SOCK_DGRAM, 0);/* AF_INET is internet domain*/\
     \
     if (sockfd < 0) \
        error("ERROR opening socket");\
        \
     bzero((char *) &serv_addr, sizeof(serv_addr));/*sets all values in a buffer to zero. It takes two arguments, */\
     												/*the first is a pointer to the buffer and the second is the */\
     												/*size of the buffer. Thus, this line initializes serv_addr to zeros*/\
     portno = atoi(argv[1]);/*The port number on which the server will listen for connections is passed in as an argument*/\
     serv_addr.sin_family = AF_INET;\
     serv_addr.sin_addr.s_addr = INADDR_ANY;/*This field contains the IP address of the host. For server code, */\
     										/*this will always be the IP address of the machine on which the server is running,*/\
     										/* and there is a symbolic constant INADDR_ANY which gets this address*/\
     serv_addr.sin_port = htons(portno);\
     \
     if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) /*binds a socket to an address, in this case */\
     																		  /*the address of the current host and port number*/\
     																		  /* on which the server will run*/\
     											/*it takes three arguments, the socket file descriptor, the address to which*/\
     											/*is bound, and the size of the address to which it is bound. The second */\
     											/*argument is a pointer to a structure of type sockaddr, but what is passed in*/ \
     										/*is a structure of type sockaddr_in, and so this must be cast to the correct type*/\
     error("ERROR on binding");\
     \
     listen(sockfd,5);/*allows the process to listen on the socket for connections*/\
     clilen = sizeof(cli_addr);\
     \
     \
     bzero(buffer,256);\
    n = recvfrom(sockfd,buffer,255,0,(struct sockaddr *)&cli_addr,&fromlen);/*read() will block until there is something for it to read in the socket, i.e. after the*/\
     								/* client has executed a write().*/\
     \
    if (n < 0) \
    	error("ERROR reciveing from socket");\
     \
    printf("Here is the message: %s\\n",buffer);\
    n = sendto(sockfd,"I got your message",18,0,(struct sockaddr *) &cli_addr,fromlen);\
    if (n < 0) \
    	error("ERROR sending from socket");\
     \
    \
     return 0; \
\}\
}